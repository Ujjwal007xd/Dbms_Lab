-- Creating the Customer table
CREATE TABLE Customer (
    C_id NUMBER PRIMARY KEY,
    C_Name VARCHAR2(50),
    Address VARCHAR2(100)
);

-- Creating the Orders table
CREATE TABLE Orders (
    O_ID NUMBER PRIMARY KEY,
    O_Name VARCHAR2(50),
    C_Id NUMBER,
    FOREIGN KEY (C_Id) REFERENCES Customer(C_id)
);

-- Inserting New Customers
INSERT INTO Customer VALUES 
    (11, 'Arjun Verma', 'Mumbai'),
    (12, 'Sneha Kapoor', 'Delhi'),
    (13, 'Rajat Bansal', 'Pune');

-- Inserting New Orders
INSERT INTO Orders VALUES 
    (201, 'Smartphone', 11),
    (202, 'Smartwatch', 12),
    (203, 'Earbuds', NULL);  -- No customer placed this order (yet)

-- 1. INNER JOIN: Only customers with orders
SELECT C.C_id, C.C_Name, C.Address, O.O_ID, O.O_Name
FROM Customer C
INNER JOIN Orders O ON C.C_id = O.C_Id;

-- 2. LEFT OUTER JOIN: All customers, even those with no orders
SELECT C.C_id, C.C_Name, C.Address, O.O_ID, O.O_Name
FROM Customer C
LEFT OUTER JOIN Orders O ON C.C_id = O.C_Id;

-- 3. RIGHT OUTER JOIN: All orders, even if no customer exists
SELECT C.C_id, C.C_Name, C.Address, O.O_ID, O.O_Name
FROM Customer C
RIGHT OUTER JOIN Orders O ON C.C_id = O.C_Id;

-- 4. FULL OUTER JOIN: All customers & orders (joined + unmatched)
SELECT C.C_id, C.C_Name, C.Address, O.O_ID, O.O_Name
FROM Customer C
FULL OUTER JOIN Orders O ON C.C_id = O.C_Id;

-- 5. SELF JOIN: Compare customers who live at the same address (very niche but useful!)
SELECT A.C_id AS Customer1_ID, A.C_Name AS Customer1_Name, 
       B.C_id AS Customer2_ID, B.C_Name AS Customer2_Name, 
       A.Address
FROM Customer A
JOIN Customer B 
ON A.Address = B.Address AND A.C_id <> B.C_id;

                        done by ujjwal
